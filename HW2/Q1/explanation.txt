1. On increasing the minimum support threshold, the time taken by all the algorithms decreases. This is because the total number of frequent subgraphs decreases. Since these algorithms take advantage of the Apriori property, they do not generate more candidates using infrequent subraphs, and as a result terminate quicker. 
3. FSG and gSpan take similar amount of time in most of the support thresholds. This might be because these algorithms differ mostly on the candidate generation step and not on the subgraph isomorphism part.
4. Gaston performs better than both FSG and gSpan. From the Gaston paper, it seems like gaston is using a special data structure called Embedding List for each candidate subgraph to make the graph frequency counting step much faster than in the other algorithms. FSG and gSpan may keep a an array of identifier of graphs in the dataset for which a given candidate is a subgraph of. Embedding lists also include the identifier of the node involved in the last extension for each graph in the array. Using this structure they might have saved time on subraph isomorphism.
 
